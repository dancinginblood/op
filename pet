local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow("test")
local b = w:CreateFolder("testing")
local petStuff = w:CreateFolder("Pet Stuff")
local c = w:CreateFolder("MADE BY SIX")

shared.toggle1 = false
shared.toggle2 = false
shared.hatchEggLoop = false
shared.autoCraft = false
shared.equipBest = false
shared.autoRebirth = false
shared.freePets = false
shared.selectedEgg = nil

petStuff:Dropdown("Dropdown", {"Basic", "Beach", "Cat", "Crystal", "Desert", "Forest", "Hell", "Moon", "Special", "Town", "Toy", "Void"}, true, function(mob)
    shared.selectedEgg = mob
    print(mob)
end)

b:Toggle("Auto Train", function(bool)
    shared.toggle1 = bool
    print(shared.toggle1)

    if shared.toggle1 then
        local args = {
            [1] = "NumberOne",
            [2] = true
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SkillToggle"):FireServer(unpack(args))
    end
end)

b:Toggle("Auto Fight", function(bool)
    shared.toggle2 = bool
    print(shared.toggle2)

    if shared.toggle2 then
        local args = {
            [1] = "NumberTwo",
            [2] = true
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SkillToggle"):FireServer(unpack(args))
    end
end)

petStuff:Toggle("Hatch Egg Loop", function(bool)
    shared.hatchEggLoop = bool
    print(shared.hatchEggLoop)
end)

petStuff:Toggle("Auto Craft", function(bool)
    shared.autoCraft = bool
    print(shared.autoCraft)
end)

petStuff:Toggle("Equip Best", function(bool)
    shared.equipBest = bool
    print(shared.equipBest)
end)

b:Toggle("Auto Rebirth", function(bool)
    shared.autoRebirth = bool
    print(shared.autoRebirth)
end)

petStuff:Toggle("Free Pets", function(bool)
    shared.freePets = bool
    print(shared.freePets)
end)

while wait() do
    if shared.toggle1 then
        local args = {
            [1] = "Tool"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Weight"):FireServer(unpack(args))
    end

    if shared.toggle2 then
        game:GetService("ReplicatedStorage"):WaitForChild("Combat"):WaitForChild("Events"):WaitForChild("Punch"):FireServer()
    end

    if shared.hatchEggLoop and shared.selectedEgg then
        local args = {
            [1] = shared.selectedEgg,
            [2] = 1
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("HatchEgg"):InvokeServer(unpack(args))
    end

    if shared.autoCraft then
        local args = {
            [1] = "Craft All"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("PetAction"):InvokeServer(unpack(args))
    end

    if shared.equipBest then
        local args = {
            [1] = "Equip Best"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("PetAction"):InvokeServer(unpack(args))
    end

    if shared.autoRebirth then
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Rebirth"):FireServer()
    end

    if shared.freePets then
        local args = {
            [1] = "FreeHuge",
            [2] = 1,
            [3] = "{2c4044aa-2d21-4455-b6d4-9bfd1e4a5fd7}"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("HatchEgg"):InvokeServer(unpack(args))
    end
end

b:DestroyGui()
